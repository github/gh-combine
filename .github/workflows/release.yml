name: release

on:
  push:
    tags:
      - "*"

permissions: {}

jobs:
  release:
    if: github.repository == 'github/gh-combine'
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      artifact-id: ${{ steps.upload-artifact.outputs.artifact-id }}
      artifact_dir: ${{ steps.build.outputs.artifact_dir }}

    steps:
      - name: checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # pin@v5.0.0
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: setup go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # pin@v6
        with:
          go-version-file: "go.mod"
          cache: false

      - name: bootstrap
        run: script/bootstrap

      - name: setup goreleaser
        uses: goreleaser/goreleaser-action@e435ccd777264be153ace6237001ef4d979d3a7a # pin@v6.4.0
        with:
          install-only: true
          version: '~> v2'

      # IMPORTANT: this step MUST export for the following outputs:
      # artifact_dir: the path to the dir where artifacts are stored - ex: "dist"
      # Note: this step will build the binaries via goreleaser, place the artifacts in a dir (ex: "dist"), and then export that path as artifact_dir...
      # ... finally it will then publish a GitHub Release with those artifacts attached
      - name: build and release
        id: build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: script/build --release

      - name: upload artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # pin@v4.6.2
        id: upload-artifact
        with:
          name: ${{ steps.build.outputs.artifact_dir }} # name and path can just both be artifact_dir (ex: "dist") to keep it simple
          path: ${{ steps.build.outputs.artifact_dir }}
          if-no-files-found: error

  sign:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      attestations: write
      contents: read
    steps:
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # pin@v5.0.0
        with:
          artifact-ids: ${{ needs.release.outputs.artifact-id }}
          path: ${{ needs.release.outputs.artifact_dir }}

      - name: view artifact
        env:
          ARTIFACT_PATH: ${{ needs.release.outputs.artifact_dir }}
        run: tree -L 2 -a --dirsfirst -C -F -h -D "${ARTIFACT_PATH}"

      - name: attest build provenance
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # pin@v3.0.0
        with:
          subject-path: "${{ needs.release.outputs.artifact_dir }}/"

  verify:
    permissions: {}
    runs-on: ubuntu-latest
    needs: [release, sign]
    steps:
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # pin@v5.0.0
        with:
          artifact-ids: ${{ needs.release.outputs.artifact-id }}
          path: ${{ needs.release.outputs.artifact_dir }}

      - name: verify
        env:
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          ARTIFACT_PATH: "${{ needs.release.outputs.artifact_dir }}/"
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Scanning for files in $ARTIFACT_PATH"

          # Find all regular files in the artifact path recursively
          find "$ARTIFACT_PATH" -type f | while read -r file; do
            echo "Verifying file: $file"
            
            # Log the command that will be executed
            echo "Executing command: gh attestation verify \"$file\" --repo ${OWNER}/${REPO} --signer-workflow ${OWNER}/${REPO}/.github/workflows/release.yml"
            
            # Run the command
            gh attestation verify "$file" --repo ${OWNER}/${REPO} --signer-workflow ${OWNER}/${REPO}/.github/workflows/release.yml
          done
